return(colMeans(WJV))
}
a <- matrix(NA,nrow = ncol(v),ncol = dim(subset)[1])
a <- pbapply::pbapply(subset,1,cross_cell_average_fi_c,v)
})
parallel::stopCluster(cl)
cross_cell_average_fi_c <- function(WJ_single_model,v){
WJV <- matrix_product(t(WJ_single_model),v)
gc()
return(colMeans(WJV))
}
cl <- parallel::makeCluster(3,outfile = 'mmultlog.txt')
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
parallel::clusterExport(cl,list('cross_cell_average_fi_c','v'))
pbapply::pbapply(cl=cl,WJ,1,cross_cell_average_fi_c,v)
parallel::stopCluster(cl)
t(WJ_1)
rbenchmark::benchmark(t(WJ_1),Matrix::t(WJ_1))
source("~/GitRepos_local/scLinear_R/R/sclinear.R")
rm(list=ls())
reticulate::use_condaenv("C:/Users/mz24b548/AppData/Local/miniconda3/envs/scLinearDependencies")
full <- anndata::read_h5ad('GSE194122_openproblems_neurips2021_cite_BMMC_processed.h5ad/GSE194122_openproblems_neurips2021_cite_BMMC_processed.h5ad')
traindat <- full[full$obs$is_train == 'train']
testdat <- full[full$obs$is_train == 'test']
gex_train <- traindat[,traindat$var$feature_types == 'GEX']$X
gex_train <- as(as.matrix(gex_train),'dgCMatrix')
adt_train <- traindat[,traindat$var$feature_types == 'ADT']$X
adt_train <- as(as.matrix(adt_train),'dgCMatrix')
gex_test <- testdat[,testdat$var$feature_types == 'GEX']$X
gex_test <- as(as.matrix(gex_test),'dgCMatrix')
adt_test <- testdat[,testdat$var$feature_types == 'ADT']$X
adt_test <- as(as.matrix(adt_test),'dgCMatrix')
# Size factor normalization already done but log1p not done
# CLR for ADT already done
gex_train <- Matrix::t(log1p(gex_train))
gex_test <- Matrix::t(log1p(gex_test))
adt_train <- Matrix::t(adt_train)
adt_test <- Matrix::t(adt_test)
# predi <- fit_predictor(gex_train,adt_train,gex_test,normalize_gex = FALSE, normalize_adt =  FALSE)
pretrained <- readRDS('model_full_neurips')
fi <- feature_importance(pretrained,gex_test,normalize_gex = FALSE,n_cores = 4)
source("~/GitRepos_local/scLinear_R/R/sclinear.R")
fi <- feature_importance(pretrained,gex_test,normalize_gex = FALSE,n_cores = 4)
fi <- feature_importance(pretrained,gex_test,normalize_gex = FALSE,n_cores = 4)
list(...)
parallelly::serializedSize(v)
parallelly::serializedSize(v)
?parallel
class(c)
class(cl)
environment(v)
environment()
environment(v)
environment(Js)
environment(cross_cell_average_fi_c)
environment()
environment(Matrix::Matrix)
rm(list=ls())
reticulate::use_condaenv("C:/Users/mz24b548/AppData/Local/miniconda3/envs/scLinearDependencies")
full <- anndata::read_h5ad('GSE194122_openproblems_neurips2021_cite_BMMC_processed.h5ad/GSE194122_openproblems_neurips2021_cite_BMMC_processed.h5ad')
traindat <- full[full$obs$is_train == 'train']
testdat <- full[full$obs$is_train == 'test']
gex_train <- traindat[,traindat$var$feature_types == 'GEX']$X
gex_train <- as(as.matrix(gex_train),'dgCMatrix')
adt_train <- traindat[,traindat$var$feature_types == 'ADT']$X
adt_train <- as(as.matrix(adt_train),'dgCMatrix')
gex_test <- testdat[,testdat$var$feature_types == 'GEX']$X
gex_test <- as(as.matrix(gex_test),'dgCMatrix')
adt_test <- testdat[,testdat$var$feature_types == 'ADT']$X
adt_test <- as(as.matrix(adt_test),'dgCMatrix')
# Size factor normalization already done but log1p not done
# CLR for ADT already done
gex_train <- Matrix::t(log1p(gex_train))
gex_test <- Matrix::t(log1p(gex_test))
adt_train <- Matrix::t(adt_train)
adt_test <- Matrix::t(adt_test)
# predi <- fit_predictor(gex_train,adt_train,gex_test,normalize_gex = FALSE, normalize_adt =  FALSE)
pretrained <- readRDS('model_full_neurips')
tset <- readRDS('training_set')
Rcpp::cppFunction('
arma::mat dcSVD(const arma::mat & X) {
arma::mat U,V;
arma::vec s;
arma::svds(U,s,V,X,300);
return V;
}
',depends="RcppArmadillo")
Rcpp::cppFunction('
arma::mat dcSVD(const arma::SpMat & X) {
arma::mat U,V;
arma::vec s;
arma::svds(U,s,V,X,300);
return V;
}
',depends="RcppArmadillo")
Rcpp::cppFunction('
arma::mat dcSVD(const sp_mat & X) {
arma::mat U,V;
arma::vec s;
arma::svds(U,s,V,X,300);
return V;
}
',depends="RcppArmadillo")
Rcpp::cppFunction('
arma::mat SVDS_(const sp_mat & X) {
arma::mat U,V;
arma::vec s;
arma::svds(U,s,V,X,300);
return V;
}
',depends="RcppArmadillo")
test <- sparseMatrix(tset)
Rcpp::cppFunction('
arma::mat SVDS_(const sp_mat & X) {
arma::mat U,V;
arma::vec s;
arma::svds(U,s,V,X,300);
return V;
}
',depends="RcppArmadillo,Rcpp")
Rcpp::cppFunction('
arma::mat SVDS_(const arma::sp_mat & X) {
arma::mat U,V;
arma::vec s;
arma::svds(U,s,V,X,300);
return V;
}
',depends="RcppArmadillo")
v <- SVDS_(tset)
Rcpp::sourceCpp('src/tSVD.cpp')
usethis::use_rcpp_armadillo()
Rcpp::sourceCpp('src/tSVD.cpp')
devtools::load_all('../scLinear_R/')
devtools::load_all('scLineaR.Rproj')
usethis::use_build_ignore(c(('Compare_tissue_models.R','deriv_check.R','check_model_performance.R','Reproduce_training.R','Pretrain.R')))
usethis::use_build_ignore(c('Compare_tissue_models.R','deriv_check.R','check_model_performance.R','Reproduce_training.R','Pretrain.R'))
devtools::load_all('../scLinear_R/')
cl <- parallel::makeCluster(n_cores,outfile = 'feature_importance_log.txt')
cl <- parallel::makeCluster(4,outfile = 'feature_importance_log.txt')
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
parallel::clusterEvalQ(library(Matrix))
parallel::clusterEvalQ(cl,library(Matrix))
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
parallel::stopCluster(cl)
matrix_product()
matrix_product
getwd()
cl <- parallel::makeCluster(n_cores,outfile = 'feature_importance_log.txt')
cl <- parallel::makeCluster(4,outfile = 'feature_importance_log.txt')
parallel::clusterEvalQ(cl,library(Matrix))
parallel::clusterEvalQ(cl,library(Rcpp))
parallel::clusterEvalQ(cl,library(RcppEigen))
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
Sys.getenv("CXX")
system("which g++")
system("g++ --version")
parallel::stopCluster(cl)
cl <- parallel::makeCluster(4,outfile = 'feature_importance_log.txt')
parallel::clusterEvalQ(cl,library(Matrix))
parallel::clusterEvalQ(cl,library(Rcpp))
parallel::clusterEvalQ(cl,library(RcppEigen))
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
parallel::clusterEvalQ(cl, Rcpp::cppFunction('
int add(int x, int y) {
return x + y;
}'))
Sys.which("make")
Sys.which("gcc")
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
parallel::clusterEvalQ(cl,{
library(Rcpp)
library(RcppEigen)
})
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
')
)
Sys.getenv("PATH")
usethis::use_rcpp_eigen()
usethis::use_rcpp_eigen()
source("~/GitRepos_local/scLinear_R/Check.R")
source("~/GitRepos_local/scLinear_R/Check.R")
usethis::use_rcpp()
cl <- parallel::makeCluster(4,outfile = 'feature_importance_log.txt')
parallel::clusterEvalQ(cl,{
library(Rcpp)
})
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
i <- 1
parallel::clusterExport(cl,i)
i <- 1
parallel::clusterExport(cl,list('i'))
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
clusterEvalQ(cl, Sys.which("make"))
parallel::clusterEvalQ(cl, Sys.which("make"))
clusterEvalQ(cl, system("gcc --version", intern = TRUE))
parallel::clusterEvalQ(cl, system("gcc --version", intern = TRUE))
clusterEvalQ(cl, Sys.getenv("PATH"))
parallel::clusterEvalQ(cl, Sys.getenv("PATH"))
Rcpp::compileAttributes()
parallel::clusterEvalQ(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
parallel::clusterEvalQ(cl,system('make --version'))
parallel::clusterEvalQ(cl,system('gcc --version'))
?clusterEvalQ
parallel::clusterEvalQ(cl,system('gcc --version',intern = TRUE))
parallel::clusterEvalQ(cl,system('make --version',intern = TRUE))
parallel::clusterEvalQ(cl, Sys.which("make"))
parallel::clusterEvalQ(cl, Sys.which("gcc")
)
parallel::clusterEvalQ(cl,system('make --version',intern = TRUE))
parallel::clusterEvalQ(cl,system('make --version')
)
parallel::clusterEvalQ(cl, Sys.which("make"))
parallel::clusterEvalQ(cl, file.info("C:/rtools44/usr/bin/make.exe"))
parallel::clusterEvalQ(cl, {
result <- tryCatch({
version <- system('make --version', intern = TRUE)
return(paste("Make version:", version))
}, error = function(e) {
return(paste("Error:", e$message))
})
return(result)
})
parallel::clusterEvalQ(cl, file.info("C:/rtools44/usr/bin/make.exe"))
parallel::clusterEvalQ(cl, Sys.getenv("PATH"))
Sys.getenv('PATH')
main_path <- Sys.getenv("PATH")
clusterEvalQ(cl, Sys.setenv(PATH = main_path))
parallel::clusterEvalQ(cl, Sys.setenv(PATH = main_path))
parallel::clusterExport(cl,list('main_path'))
parallel::clusterEvalQ(cl, Sys.setenv(PATH = main_path))
parallel::clusterEvalQ(cl, Sys.getenv("PATH"))
parallel::clusterEvalQ(cl,system('make --version')
)
cl
parallel::stopCluster(cl)
cl <- parallelly::makeClusterPSOCK(4, outfile = 'feature_importance_log.txt')
parallel::clusterEvalQ(cl,system('make --version'))
cl <- parallel::makeCluster(4,outfile = 'feature_importance_log.txt')
parallel::clusterEvalQ(cl,system('make --version'))
Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
parallel::clusterExport(cl,list('matrix_product'))
a <- matrix(1:9,nrow = 3, ncol = 3)
b <- matrix(1:9,nrow = 3, ncol = 3)
matrix_product(a,b)
parallel::clusterEvalQ(cl
,{
a <- matrix(1:9,nrow = 3, ncol = 3)
b <- matrix(1:9,nrow = 3, ncol = 3)
matrix_product(a,b)
})
parallel::clusterEvalQ(cl
,{
a <- matrix(1:9,nrow = 3, ncol = 3)
b <- matrix(1:9,nrow = 3, ncol = 3)
})
parallel::clusterEvalQ(cl
,{
a <- matrix(1:9,nrow = 3, ncol = 3)
b <- matrix(1:9,nrow = 3, ncol = 3)
})
parallel::clusterEvalQ(cl
,{
a <- matrix(1:9,nrow = 3, ncol = 3)
b <- matrix(1:9,nrow = 3, ncol = 3)
matrix_product(a,b)
})
ls()
parallel::clusterEvalQ(cl
,{
ls()
})
parallel::clusterEvalQ(cl
,{
matrix_product
})
parallel::clusterExport(cl,'matrix_product')
parallel::clusterEvalQ(cl
,{
matrix_product
})
parallel::clusterEvalQ(cl
,{
a <- matrix(1:9,nrow = 3, ncol = 3)
b <- matrix(1:9,nrow = 3, ncol = 3)
matrix_product(a,b)
})
parallel::clusterCall(cl,Rcpp::cppFunction('
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
',depends="RcppEigen")
)
?makecluster
?makeCluster
parallel::stopCluster(cl)
cl <- parallel::makeCluster(4,outfile = 'feature_importance_log.txt',homogenous = TRUE)
parallel::clusterEvalQ(cl,system('make --version'))
cl <- parallel::makeCluster(4,outfile = 'feature_importance_log.txt')
parallel::clusterEvalQ(cl,system('make --version'))
parallel::clusterCall(cl,cppFunction,'
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
')
parallel::clusterCall(cl,Rcpp::cppFunction,'
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
')
?clusterCall
Sys.getenv()
system('make --version')
?RcppFunction
?cppFunction
parallel::clusterCall(cl,Rcpp::cppFunction,code = '
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
', depends = 'RcppEigen')
parallel::clusterCall(cl,Rcpp::cppFunction,code = '
NumericMatrix matrix_product(NumericMatrix tm, NumericMatrix tm2) {
// Convert R matrices to Eigen matrices
const Eigen::Map<Eigen::MatrixXd> ttm(as<Eigen::Map<Eigen::MatrixXd>>(tm));
const Eigen::Map<Eigen::MatrixXd> ttm2(as<Eigen::Map<Eigen::MatrixXd>>(tm2));
// Perform matrix multiplication
Eigen::MatrixXd prod = ttm * ttm2;
// Return the result as a NumericMatrix
return wrap(prod);
}
', depends = 'RcppEigen', env = .GlobalEnv)
getwd()
setwd(../)
setwd('../')
getwd()
setwd('../')
